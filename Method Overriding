Method Overriding is a feature in object-oriented programming where a subclass (child class)
provides its own implementation of a method that is already defined in its superclass (parent class).

Key Characteristics:
Same Method Signature: The overridden method in the subclass must have the same name, return type, and parameters as the method in the parent class.
Runtime Polymorphism: The specific method that gets called is determined at runtime based on the actual object type, not the reference type.
Inheritance Requirement: Method overriding only occurs in inheritance relationships between classes.

class Animal {
    public void makeSound() {
        System.out.println("The animal makes a sound");
    }
}
class Dog extends Animal {
    @Override
    public void makeSound() {  // Overriding the parent method
        System.out.println("The dog barks");
    }
}

class Cat extends Animal {
    @Override
    public void makeSound() {  // Overriding the parent method
        System.out.println("The cat meows");
    }
}


Method overriding allows subclasses to provide specialized behavior while maintaining a consistent interface.
This enables polymorphism, where you can treat objects of different subclasses uniformly through their common 
parent class interface, but each object will execute its own specific implementation of the method.
The @Override annotation (in languages like Java) is optional but recommended as it helps catch errors and makes the code more readable by explicitly indicating that you're overriding a parent method.
